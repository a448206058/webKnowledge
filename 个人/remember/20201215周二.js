// 1． 第一个记忆周期：5分钟
// 2． 第二个记忆周期：30分钟 20201214 19:30
// 3． 第三个记忆周期：12小时 20201215 07:00
// 4． 第四个记忆周期：1天 20201215 19:00
// 5． 第五个记忆周期：2天 20201216 19:00
// 6． 第六个记忆周期：4天 20201218 19:00
// 7． 第七个记忆周期：7天 20201220 19:00
// 8． 第八个记忆周期：15天 20201228
http
tcp
udp
https
http2
http3
多路复用
七层网络结构
网络安全


/*
    基础
    tcp/udp协议
    tcp是一种面向连接的、可靠的、基于字节流的传输层通信协议。处o于第四层传输层
    面向连接
    仅支持单播传输
    面向字节流
    可靠传输
    提供全双工通信
    udp是一种简单的面向数据包、面向无连接、不可靠的通信协议，位于传输层，
    它与tcp协议一样用于处理数据包，是一种无连接的协议。


    tcp/ip 20201212 08:59 --1-- 09:12 --2-- 09:30
        tcp 是面向连接的、可靠的、基于字节流的传输层通信协议 位于传输层
        特点是：
            面向连接
            仅支持单播功能
            可靠传输
            基于字节流
            提供双全功通信
       upd
            udp 是面向数据报、无连接、不可靠额传输层通信协议 和tcp一样用于处理数据包，是一种无连接的协议
            面向无连接
            支持单播 多播 广播功能
            不可靠传输
            面向报文

     https是在http上建立ssl加密层，并对传输数据进行加密，是http协议的安全版 20201215 09:15 --1-- 09:23
        主要作用是：
            1.对数据进行加密，并建立一个信息安全通道，来保证传输过程中的数据安全
            2.对网站服务器进行真实身份认证。

     20201215 09:30 --1-- 10:19 --2-- 10:38
     http协议是超文本传输协议，是用于万维网服务器传输文本到本地浏览器的传送协议。http是基于tcp/ip协议来传递数据，它不涉及数据包的传输
        简单快速 get、post、head、put、delete
        灵活 允许传输任意类型的数据对象
        无连接 限制每次连接只处理一个请求
        无状态 协议不保存之前的一切信息

     http与https的区别 20201215 10:29 --1-- 10:38 --2-- 10:55
        http是明文传输协议，https协议是由ssl+http协议构建的可进行加密传输、身份认证的网络协议，比http协议安全
        https比http更加安全，利于seo
        https需要用到ssl证书
        https标准端口443，http标准端口80
        https基于应用层，http基于传输层
        https在浏览器显示绿色安全锁，http没有显示

    osi7层 20201215 10:35 --1-- 10:38 --2-- 10:56
        物理层、数据链路层、网络层、传输层、会话层、表示层、应用层

    优雅降级与渐进增强 20201215 10:42 --1-- 10:46 --2-- 11:27
        优雅降级：一开始就构建完成功能，然后再针对低版本IE进行兼容
        渐进增强：针对低版本进行构建页面，然后再针对高级浏览器进行更好的效果开发

    怪异模式 --1-- 20201215 10:51 --1-- 10:56 --2-- 20201215 11:28
        写文档声明<!DOCTYPE HTML>
        浏览器模式包括 标准模式 接近标准模式 怪异模式
        怪异模式就是兼容老页面。使用浏览器自己的方式解析执行代码，因为不同浏览器解析执行的方式不一样，所以我们称之为怪异模式。

    http2及http3特性 20201215 11:43 --1-- 11:49 --2-- 13:12
        Http1.1的缺陷
            由于队头阻塞导致带宽无法被充分利用
            无状态特性-带来的巨大的http头部
            明文传输-带来的不安全性
            不支持服务器推送消息

        http2
            基于SPDY，专注于性能，最大的目标是在用户和网站间只用一个连接
            二进制传输
                http2传输数据量的大幅减少，主要是以二进制方式传输和header压缩
            header压缩
            多路复用
            serve push
            提高安全性
       http3
            基于udp协议 让http跑在quic上
            实现了类似tcp的流量控制、传输可靠性的功能
            实现了快速握手功能
            继承了TLS加密功能
            多路复用，彻底解决TCP中队头阻塞问题
       http1.1有俩个主要缺点：安全不足和性能不高
       http2完全兼容http1，是更安全的http、更快的https，头部压缩、多路复用等技术可以充分利用带宽，降低延迟，从而
       大幅度提高上网体验
       QUIC基于UDP实现，是http3中的底层支撑协议，该协议基于UDP，又取了tcp的计划，实现了即快又可靠的协议


        CDN优化原理

        类型转换 20201215 11:48 --1-- 13:18 --2-- 14:31
            强制类型转换
                Boolean
                Number
                String
            隐式类型转换
                运算符

        amd,cmd及commonjs区别 20201215 14:05 --1-- 14:10 --2-- 14:36
            define require
            AMD是requirejs在推广过程中对模块定义的规范化产出
            amd规范是异步加载模块，允许指定回调函数
                俩个api:
                require([module], callback)
                define(id, [depends], callback)
            cmd
                cmd是seajs在推广过程中对模块定义的规范化产出
                cmd是同步模块定义
            commonJs
                commonjs的核心思想就是通过require方法来同步加载所要依赖的其它模块，然后通过exports
                或者module.exports来导出需要暴露的接口 用在node中
            es6--export/import
                export import
                通过babel将import编译为require

        import、require区别 20201215 14:08 --1-- 14:11 --2-- 14:37
            区别1：模块加载时间
                require 运行时加载
                import 编译时加载
            区别2：模块的本质
                require:模块就是对象，输入时必须查找对象属性
                Import:es6模块不是对象，而是通过export命令显式指定输出的代码，再通过Import命令输入

      https特点 20201215 14:10 --1-- 14:30 --2-- 14:38
        https协议的主要功能都基本依赖于TLS/SSL协议，TLS/SSL的功能实现利用非对称加密实现身份认证和密钥协商
        1.解决内容可能被窃听的问题-加密
        2.解决报文可能遭篡改的问题-数字签名
        3.解决通信方身份可能被伪造的问题-数字证书

     web安全 20201215 14:30 --1-- 14:39 --2-- 15:02
        xss(跨站脚本攻击）
            方式：注入非法的html或者javascript代码
            防御：httponly 在cookie中设置httponly属性，使js脚本无法读取到cookie信息
            前端负责输入检查，后端做相同的过滤检查
            某些情况下，不能对用户数据进行严格过滤时，需要对标签进行转换
        CSRF(跨站点伪造请求）
            方式：冒充用户发起请求
            防御：验证码，尽量使用Post、请求来源限制、使用token
        点击劫持
            方式：嵌入透明的iframe
            防御： if(self !== top) top.location = self.location;
            x-frame-options：DENY 表示页面不允许 SAMEORIGIN ALLOW-FROM
            sandbox = "allow-same-origin"

     CDN的优化原理
        内容分发网络
        工作原理就是将你源站的资源缓存到位于全球各地的CDN节点上，用户请求资源时，就近返回节点上缓存的资源，
        而不需要每个用户的请求都回到您的源站获取，避免网络拥塞、缓解源站压力，保证用户访问资源的速度和体验

     前端优化
        减少http请求次数
        css sprites js css 源码压缩、图片大小控制合适
        CDN托管 data缓存
        前端用变量保存AJAX请求结果
        少用全局变量、缓存DOM节点查找的结果
        减少IO读取操作
        图片预加载
        将脚本放在底部 加上时间戳
 */

